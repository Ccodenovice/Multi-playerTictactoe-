# The Tic-Tac-Toe board is represented as a dictionary with keys 1 to 9, each corresponding to a position on the board.
board = {1: ' ', 2: ' ', 3: ' ', 
         4: ' ', 5: ' ', 6: ' ',
         7: ' ', 8: ' ', 9: ' '}

# Symbols for Player 1 and Player 2
player1 = 'O'  # Player 1's symbol
player2 = 'X'  # Player 2's symbol

# Function to print the current state of the board
def printBoard(board):
    print(board[1] + "|" + board[2] + "|" + board[3])
    print("-+-+-")
    print(board[4] + "|" + board[5] + "|" + board[6])
    print("-+-+-")
    print(board[7] + "|" + board[8] + "|" + board[9])
    print("\n")

# Function to check if a space on the board is free (not taken by 'X' or 'O')
def spaceIsFree(position):
    if board[position] == ' ':
        return True 
    return False 

# Function to insert a player's symbol ('X' or 'O') into a chosen position on the board
def insertLetter(letter, position):
    if spaceIsFree(position):  # Check if the position is free
        board[position] = letter  # Place the symbol in the chosen position
        printBoard(board)  # Print the updated board
        if checkDraw():  # Check if the game ends in a draw
            print("Draw!")  # If all spaces are filled, it's a draw
            exit() 
        if checkWin():  # Check if the player has won
            if letter == player2:
                print("Player 2 wins!")  # Player 2 wins
                exit()
            else:
                print("Player 1 wins!")  # Player 1 wins
                exit()
        return 
    else:
        # If the position is not free, ask the player to choose a new position
        print("Invalid position")
        position = int(input("Please enter a new position: "))
        insertLetter(letter, position)
        return    

# Function to check if there is a winning combination on the board
def checkWin():
    # Check all winning combinations: horizontal, vertical, and diagonal
    if (board[1] == board[2] and board[1] == board[3] and board[1] != ' '):
        return True
    elif (board[4] == board[5] and board[4] == board[6] and board[4] != ' '):
        return True
    elif (board[7] == board[8] and board[7] == board[9] and board[7] != ' '):
        return True
    elif (board[1] == board[4] and board[1] == board[7] and board[1] != ' '):
        return True
    elif (board[2] == board[5] and board[2] == board[8] and board[2] != ' '):
        return True
    elif (board[3] == board[6] and board[3] == board[9] and board[3] != ' '):
        return True
    elif (board[1] == board[5] and board[1] == board[9] and board[1] != ' '):
        return True
    elif (board[7] == board[5] and board[7] == board[3] and board[7] != ' '):
        return True
    else:
        return False

# Function to check if the game is a draw (all spaces are filled)
def checkDraw():
    for key in board.keys():
        if board[key] == ' ':
            return False  # If there is still an empty space, it's not a draw
    return True  # If all spaces are filled, it's a draw

# Function to handle a player's move
def playerMove(player, symbol):
    position = int(input(f"Player {player} ('{symbol}'), enter a position (1-9): "))
    insertLetter(symbol, position)  # Insert the symbol in the chosen position
    return 

# Main game loop where players take turns to make their moves
def playGame():
    while not checkWin():
        playerMove(1, player1)  # Player 1's move
        if checkWin():  # Check if Player 1 wins
            break
        if checkDraw():  # Check if it's a draw after Player 1's move
            break
        playerMove(2, player2)  # Player 2's move
        if checkWin():  # Check if Player 2 wins
            break
        if checkDraw():  # Check if it's a draw after Player 2's move
            break

# Start the game
playGame()

